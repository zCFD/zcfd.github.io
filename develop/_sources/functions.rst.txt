zCFD Functions
==============

Several parameters in the zCFD control dictionary will accept functions as arguments. These functions are then evaluated by the solver when reqiured. This allows you to customise & tune to solver as it runs.

.. _scale_function:

Scale Mesh Function
-------------------


.. list-table:: 
   :widths: 30 70
   :header-rows: 0

   * - **Description**
     - Transform the location of a supplied point. 
   * - **Valid for parameter**
     - :ref:`scale_mesh <scale_mesh>`
   * - **Parameters**
     - [x, y, z]: Point to transform
   * - **Returns**
     - {'coord': [x, y, z]}: Transformed coordinates


Example:

.. code-block:: python

   # Custom function to scale z coordinate by 100
   def my_scale_func(point):
       point[2] = point[2] * 100.0
       return {'coord' : point}

.. code-block:: python

   parameters = { 
    ...
    'scale': my_scale_func
    ...
   }

.. _ramp_function:

Ramp CFL Function
-----------------

There may be cases where more detailed control of the CFL number is desired - for example in some aerodynamic simulations where a specific physical event occurs at a given time.  The CFL Ramp function lets you do this.

The ramp function returns a single floating point number (the CFL number) and can also be used to update elements of the 'cfl' Python object such as cfl.min_cfl, cfl.max_cfl, cfl.current_cfl, cfl.coarse_cfl, cfl.transport_cfl, cfl.cfl_ramp, cfl.cfl_pmg, or cfl.transport_cfl_pmg. 

.. list-table:: 
   :widths: 30 70
   :header-rows: 0

   * - **Description**
     - Provide a dynamic CFL number 
   * - **Valid for parameter**
     - :ref:`ramp func <cfl_control>`
   * - **Parameters**
     - solve_cycle, real_time_cycle, cfl
   * - **Returns**
     - cfl: float
     


Example:

.. code-block:: python

  # Custom function to ramp CFL based on cycle, updates the cfl object variables and returns a CFL
  def my_cfl_ramp(solve_cycle, real_time_cycle, cfl):
    cfl.min_cfl = 1.0
    cfl.max_cfl = 10.0
    cfl.cfl_ramp = 1.005
    cfl_transport = 5.0
    if solve_cycle < 500:
        cfl_new = min(cfl.min_cfl * cfl.cfl_ramp ** (max(0, solve_cycle - 1)), cfl.max_cfl)
        cfl.transport_cfl = cfl_transport * cfl_new / cfl.max_cfl
        return cfl_new

    elif solve_cycle < 1000:
        cfl.trasport_cfl = 7.5
        cfl.max_cfl = 15.0
        return 15.0

    else:
        cfl.transport_cfl = 10.0
        cfl.max_cfl = 30.0
        return 30.0

.. code-block:: python

   parameters = { 
    ...
    'time marching': {
      ...
      'ramp func': my_cfl_ramp,
      ...
      }
    ...
   }