source/getting_started/quick_start_1.rst:12: (postprocess)  The NACA0012 is a symmetrical aerofoil which is commonly used for code validation. In this configuration it is a quick and simple simulation to run. By downloading <this zip file> and following the instructions below, you should learn to to run, postprocess and visualise a simple zCFD simulation. This is a small simulation which most users should be able to run on a laptop in ~5 minutes.
source/getting_started/quick_start_1.rst:21: (naca)  . The zip file contains a mesh file (naca0012.h5), a zCFD control file (naca0012.py).
source/getting_started/quick_start_1.rst:21: (naca)  . The zip file contains a mesh file (naca0012.h5), a zCFD control file (naca0012.py).
source/getting_started/quick_start_1.rst:37: (Naca)  Naca0012.py is the zCFD control file. When we run zCFD, zCFD reads the control file and uses the python dictionary ‘parameters’ to set the solver settings. A brief overview of the parameters dictionary for the NACA0012 simulation is given below; for a more detailed description of the control file structure, see the 
source/getting_started/quick_start_1.rst:99: (math)   to :math:
source/getting_started/quick_start_1.rst:109: (discretised)   sets the type of flow we are simulating - there are a number of different options depending on the assumptions we make about the flow. ‘RANS’ is used when we are simulating a compressible flow, and want to simulate the effects of turbulence on the mean flow by use of a turbulence equation. The ‘order’ sets how the flow is spatially discretised, and the ‘turbulence’ sets the turbulence model used.
source/getting_started/quick_start_1.rst:127: (fairfield)   contains all the mesh faces which are on the fairfield exterior surface of the mesh. The ‘farfield’ type means that flow can pass freely through the specified mesh faces, and the ‘riemann’ kind means that flow can pass both in and out of the mesh via the specified mesh faces.
source/getting_started/quick_start_1.rst:127: (riemann)   contains all the mesh faces which are on the fairfield exterior surface of the mesh. The ‘farfield’ type means that flow can pass freely through the specified mesh faces, and the ‘riemann’ kind means that flow can pass both in and out of the mesh via the specified mesh faces.
source/getting_started/quick_start_1.rst:129: (THe)  THe ‘IC_1’ dictionary is, by default, also used to define the initial guess for the flow - at 0 cycles we assume that the entirety of the flow is flowing at the 
source/getting_started/quick_start_1.rst:143: (ve)  , which are the +ve z and -ve z faces of the mesh. This boundary condition type is used here so that we can simulate an aerofoil of effectively infinite span, but with a low mesh resolution in the z axis to reduce simulation cost.
source/getting_started/quick_start_1.rst:143: (ve)  , which are the +ve z and -ve z faces of the mesh. This boundary condition type is used here so that we can simulate an aerofoil of effectively infinite span, but with a low mesh resolution in the z axis to reduce simulation cost.
source/getting_started/quick_start_1.rst:188: (naca)  As the solver is running it will output information about the current CFL, Multigrid level, timing, reporting information and file I/O. The output from zCFD will be written to the screen and also to a log file “naca0012.log”.
source/getting_started/quick_start_1.rst:202: (naca)   the output files will also be created with that name. The _OUTPUT folder also includes an indication of the number of parallel partitions used, this tutorial assumes a single partition and so the output will be “naca0012_P
source/getting_started/quick_start_1.rst:202: (naca)  _OUTPUT” if we ran on two partitions it would be “naca0012_P
source/getting_started/quick_start_1.rst:210: (naca)  naca0012.log
source/getting_started/quick_start_1.rst:212: (naca)  naca0012_report.csv
source/getting_started/quick_start_1.rst:214: (naca)  naca0012_report.ipynb
source/getting_started/quick_start_1.rst:214: (ipynb)  naca0012_report.ipynb
source/getting_started/quick_start_1.rst:215: (naca)  An auto-generated Jupyter notebook which can be used to read the naca0012_report.csv file and easily plot the flow statistics varying with cycle number.
source/getting_started/quick_start_1.rst:216: (naca)  naca0012_results.h5
source/getting_started/quick_start_1.rst:218: (naca)  naca0012_status.txt
source/getting_started/quick_start_1.rst:218: (txt)  naca0012_status.txt
source/getting_started/quick_start_1.rst:219: (json)  A .json format file outputted by zCFD. Among other things, it  records when the simulation was last run, which mesh was used and which control file was used.
source/getting_started/quick_start_1.rst:220: (naca)  naca0012_P1_OUTPUT/
source/getting_started/quick_start_1.rst:222: (naca)  naca0012_P1_OUTPUT/naca0012.pvd
source/getting_started/quick_start_1.rst:222: (naca)  naca0012_P1_OUTPUT/naca0012.pvd
source/getting_started/quick_start_1.rst:222: (pvd)  naca0012_P1_OUTPUT/naca0012.pvd
source/getting_started/quick_start_1.rst:224: (naca)  naca0012_P1_OUTPUT/naca0012_farfield.pvd, naca0012_wall.pvd etc
source/getting_started/quick_start_1.rst:224: (naca)  naca0012_P1_OUTPUT/naca0012_farfield.pvd, naca0012_wall.pvd etc
source/getting_started/quick_start_1.rst:224: (pvd)  naca0012_P1_OUTPUT/naca0012_farfield.pvd, naca0012_wall.pvd etc
source/getting_started/quick_start_1.rst:224: (naca)  naca0012_P1_OUTPUT/naca0012_farfield.pvd, naca0012_wall.pvd etc
source/getting_started/quick_start_1.rst:224: (pvd)  naca0012_P1_OUTPUT/naca0012_farfield.pvd, naca0012_wall.pvd etc
source/getting_started/quick_start_1.rst:226: (naca)  naca0012_P1_OUTPUT/VISUALISATION/
source/getting_started/quick_start_1.rst:227: (naca)  Contains the raw data files which are loaded when the naca0012.pvd and naca0012_farfield.pvd, naca0012_wall.pvd etc. files are opened.
source/getting_started/quick_start_1.rst:227: (pvd)  Contains the raw data files which are loaded when the naca0012.pvd and naca0012_farfield.pvd, naca0012_wall.pvd etc. files are opened.
source/getting_started/quick_start_1.rst:227: (naca)  Contains the raw data files which are loaded when the naca0012.pvd and naca0012_farfield.pvd, naca0012_wall.pvd etc. files are opened.
source/getting_started/quick_start_1.rst:227: (pvd)  Contains the raw data files which are loaded when the naca0012.pvd and naca0012_farfield.pvd, naca0012_wall.pvd etc. files are opened.
source/getting_started/quick_start_1.rst:227: (naca)  Contains the raw data files which are loaded when the naca0012.pvd and naca0012_farfield.pvd, naca0012_wall.pvd etc. files are opened.
source/getting_started/quick_start_1.rst:227: (pvd)  Contains the raw data files which are loaded when the naca0012.pvd and naca0012_farfield.pvd, naca0012_wall.pvd etc. files are opened.
source/getting_started/quick_start_1.rst:228: (naca)  naca0012_P1_OUTPUT/LOGGING/
source/getting_started/quick_start_1.rst:229: (naca)  Contains a separate copy of the naca0012.log file for each MPI partition. Used for debugging.
source/getting_started/quick_start_1.rst:234: (naca)  The naca0012_report.ipynb file can be loaded using a variety of methods, but here we will load it using a browser.
source/getting_started/quick_start_1.rst:234: (ipynb)  The naca0012_report.ipynb file can be loaded using a variety of methods, but here we will load it using a browser.
source/getting_started/quick_start_1.rst:235: (visable)  The commands below should open Jupyter Notebook within a browser window. If the browser does not open automatically then the notebook URL should be visable in the command output.
source/getting_started/quick_start_1.rst:250: (naca)  Load the naca0012_report.ipynb in Jupyter, then click 
source/getting_started/quick_start_1.rst:250: (ipynb)  Load the naca0012_report.ipynb in Jupyter, then click 
source/getting_started/quick_start_1.rst:254: (naca)  The naca0012_report.ipynb makes use of the 
source/getting_started/quick_start_1.rst:254: (ipynb)  The naca0012_report.ipynb makes use of the 
source/getting_started/quick_start_1.rst:254: (naca)   method reads the naca0012_report.csv file and prints a graph of solution variable residuals against cycle number .
source/getting_started/quick_start_1.rst:268: (flatlining)  ) drop initially before flatlining / increasing.
source/getting_started/quick_start_1.rst:281: (Fx)  Check the ‘wall_Fx’ and ‘wall_Fy’ tickboxes  - given this is a symmetrical aerofoil run at 0 angle of attack, the x force corresponds to drag and the y force corresponds to lift. We would expect zero lift and a non-zero, positive drag.
source/getting_started/quick_start_1.rst:281: (Fy)  Check the ‘wall_Fx’ and ‘wall_Fy’ tickboxes  - given this is a symmetrical aerofoil run at 0 angle of attack, the x force corresponds to drag and the y force corresponds to lift. We would expect zero lift and a non-zero, positive drag.
source/getting_started/quick_start_1.rst:281: (tickboxes)  Check the ‘wall_Fx’ and ‘wall_Fy’ tickboxes  - given this is a symmetrical aerofoil run at 0 angle of attack, the x force corresponds to drag and the y force corresponds to lift. We would expect zero lift and a non-zero, positive drag.
source/getting_started/quick_start_1.rst:287: (flatline)  The force plots tell a similar story to the residuals - there are initially large oscillations as the flow settles down, before the force traces essentially flatline from 20,000 cycles onwards.
source/getting_started/quick_start_1.rst:299: (Paraview)  Step 4. Looking at results with Paraview
source/getting_started/quick_start_1.rst:300: (Paraview)  Paraview is a generally purpose visualisation tool that is the recommended way of post processing zCFD results. Please see 
source/getting_started/quick_start_1.rst:304: (naca)  As mentioned above a “naca0012_P1_OUTPUT” folder has been generated, and contains a “.pvd” file (naca0012.pvd). This file can be seen as an of index of all the different output files, this way, your output data is imported onto Paraview using a single file, making it easier to handle.
source/getting_started/quick_start_1.rst:304: (pvd)  As mentioned above a “naca0012_P1_OUTPUT” folder has been generated, and contains a “.pvd” file (naca0012.pvd). This file can be seen as an of index of all the different output files, this way, your output data is imported onto Paraview using a single file, making it easier to handle.
source/getting_started/quick_start_1.rst:304: (naca)  As mentioned above a “naca0012_P1_OUTPUT” folder has been generated, and contains a “.pvd” file (naca0012.pvd). This file can be seen as an of index of all the different output files, this way, your output data is imported onto Paraview using a single file, making it easier to handle.
source/getting_started/quick_start_1.rst:304: (pvd)  As mentioned above a “naca0012_P1_OUTPUT” folder has been generated, and contains a “.pvd” file (naca0012.pvd). This file can be seen as an of index of all the different output files, this way, your output data is imported onto Paraview using a single file, making it easier to handle.
source/getting_started/quick_start_1.rst:304: (Paraview)  As mentioned above a “naca0012_P1_OUTPUT” folder has been generated, and contains a “.pvd” file (naca0012.pvd). This file can be seen as an of index of all the different output files, this way, your output data is imported onto Paraview using a single file, making it easier to handle.
source/getting_started/quick_start_1.rst:306: (Paraview)  After opening Paraview, simply click on the “Open” icon shown below or go into File>Open or press Ctrl+O. Locate the directory in which you have stored your data and open naca0012.pvd.
source/getting_started/quick_start_1.rst:306: (Ctrl)  After opening Paraview, simply click on the “Open” icon shown below or go into File>Open or press Ctrl+O. Locate the directory in which you have stored your data and open naca0012.pvd.
source/getting_started/quick_start_1.rst:306: (naca)  After opening Paraview, simply click on the “Open” icon shown below or go into File>Open or press Ctrl+O. Locate the directory in which you have stored your data and open naca0012.pvd.
source/getting_started/quick_start_1.rst:306: (pvd)  After opening Paraview, simply click on the “Open” icon shown below or go into File>Open or press Ctrl+O. Locate the directory in which you have stored your data and open naca0012.pvd.
source/getting_started/quick_start_1.rst:313: (Paraview)  Once the file is correctly loaded in Paraview, the “Pipeline Browser” on the left of your screen should look like this:
source/getting_started/quick_start_1.rst:326: (ve)  You may need to use the ‘set view direction to +ve y’ button:
source/getting_started/quick_start_1.rst:337: (Paraview)  By default, Paraview shows the “cellvolume” variable. This allows to see that the mesh is refined near the center of the mesh, where the airfoil is. This is common practice, as capturing the flow around a body is more demanding than doing so in the free-stream. Naturally, having a really fine mesh over the entire fluid domain would make the problem really computationally expensive.
source/getting_started/quick_start_1.rst:337: (cellvolume)  By default, Paraview shows the “cellvolume” variable. This allows to see that the mesh is refined near the center of the mesh, where the airfoil is. This is common practice, as capturing the flow around a body is more demanding than doing so in the free-stream. Naturally, having a really fine mesh over the entire fluid domain would make the problem really computationally expensive.
source/getting_started/quick_start_1.rst:337: (center)  By default, Paraview shows the “cellvolume” variable. This allows to see that the mesh is refined near the center of the mesh, where the airfoil is. This is common practice, as capturing the flow around a body is more demanding than doing so in the free-stream. Naturally, having a really fine mesh over the entire fluid domain would make the problem really computationally expensive.
source/getting_started/quick_start_1.rst:337: (airfoil)  By default, Paraview shows the “cellvolume” variable. This allows to see that the mesh is refined near the center of the mesh, where the airfoil is. This is common practice, as capturing the flow around a body is more demanding than doing so in the free-stream. Naturally, having a really fine mesh over the entire fluid domain would make the problem really computationally expensive.
source/getting_started/quick_start_1.rst:345: (airfoil)  Let’s observe the pressure coefficient around the airfoil. To do so, use the scrolling menu and select the “cp” variable.
source/getting_started/quick_start_1.rst:352: (airfoil)  This gives the following (you will need to zoom in substantially to the centre of the mesh before you can clearly see the airfoil):
source/getting_started/quick_start_1.rst:358: (colormap)  Note that you can change the colormap used by Paraview by clicking on the “Choose Preset” icon:
source/getting_started/quick_start_1.rst:358: (Paraview)  Note that you can change the colormap used by Paraview by clicking on the “Choose Preset” icon:
source/getting_started/quick_start_1.rst:365: (colormaps)  Here are the same results shown using different colormaps:
source/getting_started/quick_start_1.rst:375: (airfoil)  Those simple steps allow to qualitatively inspect the solution given by our CFD simulation. More advanced analysis is also feasible. A common result in aerodynamics, especially around an airfoil, is the plot of the pressure coefficient along the plot.
source/getting_started/quick_start_1.rst:380: (naca)  Open the “naca0012_wall.pvd” file . Naturally, the resulting image looks different from the previous as this only contains the zones where a “wall” boundary condition has been defined, which in this case happens to just be the airfoil itself.
source/getting_started/quick_start_1.rst:380: (pvd)  Open the “naca0012_wall.pvd” file . Naturally, the resulting image looks different from the previous as this only contains the zones where a “wall” boundary condition has been defined, which in this case happens to just be the airfoil itself.
source/getting_started/quick_start_1.rst:380: (airfoil)  Open the “naca0012_wall.pvd” file . Naturally, the resulting image looks different from the previous as this only contains the zones where a “wall” boundary condition has been defined, which in this case happens to just be the airfoil itself.
source/getting_started/quick_start_1.rst:386: (airfoil)  It is usually of interest to have a plot showing the pressure coefficient on the upper and the lower surface, therefore it is necessary to extract the data separately for each face of the airfoil. The upper and lower surfaces of the airfoil then need to be separated.
source/getting_started/quick_start_1.rst:386: (airfoil)  It is usually of interest to have a plot showing the pressure coefficient on the upper and the lower surface, therefore it is necessary to extract the data separately for each face of the airfoil. The upper and lower surfaces of the airfoil then need to be separated.
source/getting_started/quick_start_1.rst:388: (naca)  To this end, the “Clip” filter has to be used. To use it, right-click on the “naca0012_wall.pvd” object in the Pipeline Browser, select Add Filter -> Alphabetical -> Clip. The properties of the “Clip” filter are displayed on the left. You should set them to the following combination:
source/getting_started/quick_start_1.rst:388: (pvd)  To this end, the “Clip” filter has to be used. To use it, right-click on the “naca0012_wall.pvd” object in the Pipeline Browser, select Add Filter -> Alphabetical -> Clip. The properties of the “Clip” filter are displayed on the left. You should set them to the following combination:
source/getting_started/quick_start_1.rst:395: (airfoil)  By default, this will “remove” the lower surface of the airfoil, leaving the following shape:
source/getting_started/quick_start_1.rst:419: (CellDatatoPointData)  Then the data should be converted from “cell data” to “point data”. This is done by using the “CellDatatoPointData” filter. Access by right-clicking on the “Slice” object selecting “Add filters”.
source/getting_started/quick_start_1.rst:421: (Paraview)  Once this is done, a plot can be produced in Paraview using the “PlotOnSortedLines” filter. Right-click on the “CellDatatoPointData1” object created previously and add the “PlotOnSortedLines” filter. A plot should appear on the right. You can select the variables to plot in the “Properties -> Series Parameters” window, as well as changing the settings of the axis.
source/getting_started/quick_start_1.rst:421: (PlotOnSortedLines)  Once this is done, a plot can be produced in Paraview using the “PlotOnSortedLines” filter. Right-click on the “CellDatatoPointData1” object created previously and add the “PlotOnSortedLines” filter. A plot should appear on the right. You can select the variables to plot in the “Properties -> Series Parameters” window, as well as changing the settings of the axis.
source/getting_started/quick_start_1.rst:421: (CellDatatoPointData)  Once this is done, a plot can be produced in Paraview using the “PlotOnSortedLines” filter. Right-click on the “CellDatatoPointData1” object created previously and add the “PlotOnSortedLines” filter. A plot should appear on the right. You can select the variables to plot in the “Properties -> Series Parameters” window, as well as changing the settings of the axis.
source/getting_started/quick_start_1.rst:421: (PlotOnSortedLines)  Once this is done, a plot can be produced in Paraview using the “PlotOnSortedLines” filter. Right-click on the “CellDatatoPointData1” object created previously and add the “PlotOnSortedLines” filter. A plot should appear on the right. You can select the variables to plot in the “Properties -> Series Parameters” window, as well as changing the settings of the axis.
source/getting_started/quick_start_1.rst:422: (Untick)  Select the “cp” variable in “Series Parameters’, and use ‘Points_X’ as the ‘X Array Name’. Untick ‘Show Legend’, set ‘Left Axis Title’ to ‘$C_p$’ and set the ‘Bottom Axis Title’ to ‘x’. You can also use the “Left Axis Use Custom Range” option to  change the y-axis range:
source/getting_started/quick_start_1.rst:444: (Paraview)  By default, Paraview writes all the variables into the .csv file. However, if only a few of them are of interest, you can use the “Choose Arrays To Write” option.
source/getting_started/quick_start_1.rst:446: (airfoil)  Now, this procedure can be repeated for the lower surface of the airfoil. A pressure coefficient plot can then be made for validation purposes.
