
Propellor Modelling
-------------------

Overview
^^^^^^^^

Propellors are similar to wind turbines except that they are desgined to produce thrust rather than torque from lift.  zCFD includes a blade element fluid zone model based on an actuator disc, for propellors:

.. code-block:: bash

    propellor_zones = {
        'FZ_1': {
            'name': 'R01',
            'type': 'disc',
            'model': 'blade element propellor',
            'number of blades': 2,
            'status': 'on',
            'outer radius': 0.175,
            'inner radius': 0.039025,
            'def': './propellor_vtp/R01.vtp'
            'rotation direction': 'clockwise',
            'verbose': True,
            'update frequency': 1,
            'centre': [0.0, 0.0, 0.0],
            'reference plane': True,
            'normal': [0.0, 0.0, 1.0],
            'up': [1.0, 0.0, 0.0],
            'blade chord': [[0.2333, 0.1468], [0.2667, 0.1681], ... , [1.0, 0.0581]],
            'blade twist': [[0.2333, 28.6202], [0.2667, 25.5228], ... , [1.0, 0.0]],
            'aerofoil cd': [[-60.0, 1.4552], [-50.0, 1.0992], ... , [60.0, 2.3542]],
            'aerofoil cl': [[-60.0, -0.7978], [-50.0, -0.8195], ... , [60.0, 1.3818]],
            'number of segments': 24,
            'tip loss correction': 'elliptic',
            'tip loss correction radius': 0.8,
            }
        }

The *'name'* key is used to tag results associated with the propellor.

The *'type'* defines the fluid zone type for propellors.

The *'model'* should be set to 'blade element propellor'.

The *'number of blades'* can be any positive integer - typically 2, 3 or 4.

The *'status'* can be set to on or off, as a quick way to disable a propellor without re-generating the model.

The *'inner radius'* and *'outer radius'* refer to the rotor disc.

The *'def'* is a path to a file containing the VTP file defining the disc fluid zone geometry.  This can easily be created interactively in ParaView or else using the *ParaView Simple* library in Python:

.. code-block:: bash

    line = Line()
    line.Resolution = 10
    line.Point1 = (0.0, 0.0, -0.5 * 0.175)
    line.Point2 = (0.0, 0.0,  0.5 * 0.175)
    tube = Tube(Input=line)
    tube.NumberofSides = 128
    tube.Radius = 0.175
    transform = Transform(Input=tube)
    transform.Transform = "Transform"
    transform.Transform.Rotate = [0.0, 0.0, 0.0]
    transform.Transform.Translate = [0.0, 0.0, 0.0]
    writer = CreateWriter('./propellor_vtp/R01.vtp')
    writer.Input = transform
    writer.UpdatePipeline()

where the above code block would produce a fluid zone for a propellor with normal [0.0,0.0,1.0].  Note that general use of the ParaView rotate command should follow the (default) ZXY convention, for which the following is a reasonable estimate:

.. code-block:: bash

    def rotation_matrix(axis, theta):
        # Rotation matrix for counterclockwise rotation about axis by theta (radians)
        axis = np.asarray(axis)
        axis = axis / math.sqrt(np.dot(axis, axis))
        a = math.cos(theta / 2.0)
        b, c, d = -axis * math.sin(theta / 2.0)
        aa, bb, cc, dd = a * a, b * b, c * c, d * d
        bc, ad, ac, ab, bd, cd = b * c, a * d, a * c, a * b, b * d, c * d
        return np.array([[aa + bb - cc - dd, 2 * (bc + ad), 2 * (bd - ac)],
                         [2 * (bc - ad), aa + cc - bb - dd, 2 * (cd + ab)],
                         [2 * (bd + ac), 2 * (cd - ab), aa + dd - bb - cc]])

    def trans_rot(v, vec, ang):
        v2 = np.dot(rotation_matrix(vec, ang), v)
        return [v2[0], v2[1], v2[2]]

    # ParaView rotation emulator - note that ParaView (i.e. VTK) uses the order ZXY for rotation.
    def pv_rotate(pt,args):
        pt1 = trans_rot(pt,[0.0,0.0,1.0],math.radians(args[2]))
        x1 = trans_rot([1.0,0.0,0.0],[0.0,0.0,1.0],math.radians(args[2]))
        y1 = trans_rot([0.0,1.0,0.0],[0.0,0.0,1.0],math.radians(args[2]))
        pt2 = trans_rot(pt1,x1,math.radians(args[0]))
        y2 = trans_rot(y1,x1,math.radians(args[0]))
        pt3 = trans_rot(pt2,y2,math.radians(args[1]))
        return pt3

The *'rotation direction'* can be clockwise or anticlockwise.  zCFD will apply the necessary orientations to the forces and wake rotation.

The *'verbose'* keyword (True or False) specifies the level of output from the model.

The *'update frequency'* for propellors should be 1 - meaning that the model is evaluated on every solver cycle.

The *'centre'* is the centre of the disc rotor in 3D, and the *'normal'* defines the orientation.

The *'up'* vector is used to define $\theta_0$ on the rotor: the radial vector from the centre to the rotor tip at $\theta_0$ is defined by the cross product of the up vector and disc normal. All forces on the disc are evaluated by incrementing $theta$ over the range $[0,2\pi]$.

The *'blade chord'* and *'blade twist'* are each defined as a list of points over the domain [0,1].  Note that the twist is measured in degrees and the chord is scaled by the outer radius in zCFD, so the input has to be scaled for a radius of 1.

The *'aerofoil cl'* and *'aerofoil cd'* curves are lists of points defining the aerofoil characteristics.  zCFD interpolates values between these points and will extrapolate if necessary.

The *'number of segments'* used in the model should be chosen to match the mesh spacing in the CFD mesh around the propellor.  zCFD does not generate a new mesh in order to apply the propellor model.

A *'tip loss correction'* can be applied to the blade element model, and the only option is *'elliptic'*. The *'tip loss correction radius'* is the radius from which the tip correction is applied and has a default value of 0.8.
